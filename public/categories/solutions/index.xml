<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>solutions on DenysG的个人博客</title>
    <link>https://48474.net/categories/solutions/</link>
    <description>Recent content in solutions on DenysG的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Nov 2020 03:12:35 +0800</lastBuildDate><atom:link href="https://48474.net/categories/solutions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什么是SOCKET ？ Socket - TCP 篇</title>
      <link>https://48474.net/post/waht_it_socket/</link>
      <pubDate>Tue, 03 Nov 2020 03:12:35 +0800</pubDate>
      
      <guid>https://48474.net/post/waht_it_socket/</guid>
      <description>近期工作内容经常会提到 Socket, 但是绝大多数人对于这个还是一个很蒙圈的状态，所以从网上找了一堆的资料，简单的将 Socket 做一个详细一些的解释。
Socket 直译是 插座 的意思，一般翻译成 套接字，简单的来说就是网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。
在百科中的解释是 Socket本质是编程接口(API)，对TCP/IP的封装 ，所以要想搞明白 Socket 就要先弄明白什么是 TCP/IP ，但是要想搞明白 TCP/IP 又要先弄明 网络七层协议，这个路绕的有点大，下面就一个一个搞清楚。
网络七层协议 放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为OSI模型（OSI model），就是通常所说的网络七层协议。
第1层 物理层(Physical Layer) 在局部局域网上传送帧，它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机适配器等。在这一层，数据的单位称为比特（bit）。属于物理层定义的典型规范代表包括：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45等。如 RJ-45，就是日常电脑连接的网线的水晶头的规格。
第2层 数据链接层(Data Link Layer) 负责网络寻址、错误侦测和改错。将物理层提供的可能出错的物理连接改造成逻辑上无差错的数据链路，并对物理层的原始数据进行数据封装。数据链路层中的数据封装是指：封装的数据信息中，包含了地址段和数据段等。地址段含有点对点发送节点和接收节点的地址（如MAC），控制段用来表示数格连接帧的类型，数据段包含实际要传输的数据。例如以太网、无线局域网（Wi-Fi）等。
第3层 网络层(Network Layer) 决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成分组。网络表头包含了网络数据。例如:互联网协议（IP）等。
第4层 传输层(Transport Layer) 把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议义（TCP、UDP）等。
第5层 会话层(Session Layer) 负责在数据传输中设置和维护电脑网络中两台电脑之间的通信连接。
第6层 表达层(Presentation Layer) 把数据转换为能与接收者的系统格式兼容并适合传输的格式。
第7层 应用层(Application Layer) 提供为应用软件而设的界面，以设置与另一应用软件之间的通信。例如: HTTP，HTTPS，FTP，TELNET，SSH，SMTP，POP3等。应用层直接和应用程序接口并提供常见的网络应用服务，应用层也向第六层表示层发出请求。
上述主要内容来自 维基百科
TCP/IP TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols），简称TCP/IP，名称源自该协议家族的两个核心协议：TCP（Transmission Control Protocol 传输控制协议）和IP（Internet Protocol 互联网协议）。</description>
    </item>
    
    <item>
      <title>折腾日志(1) -- 自用树莓派内网穿透搭建GITEA</title>
      <link>https://48474.net/post/raspi-toss-log-01/</link>
      <pubDate>Wed, 14 Oct 2020 12:25:15 +0800</pubDate>
      
      <guid>https://48474.net/post/raspi-toss-log-01/</guid>
      <description>自备树莓派4B 这台自行组装的树莓派4B，主要用途: 存储，应用服务。
安装树莓派系统, 并且安装到树莓派到硬盘中
这里不多说安装树莓派的方法，可以自行搜索 度娘 或 谷歌
我的树莓派是啥样子的？？ (最近搭建了个图床可以上图了) 无图无真相。 主板 1 块： 树莓派4B 8G
SSD硬盘 2块：
一块 256G(上面红色的),
另一块 512G(下面银色的)。 全部是 浦科特（Plextor） M8VC。
扩展板 2块：
X829 扩展板:: 一款2.5&amp;rsquo; 双硬盘 NAS扩展板 树莓派4B&amp;ndash;树莓派NAS集群 X829 扩展板
X735扩展板:: 电源管理和温控风扇扩展板 树莓派4B&amp;ndash;X735电源管理和温控风扇扩展板
俯视图 右侧接口 左侧HHD指示灯 安装好docker，frpc 这2个服务应用 以上都安装好了，就可以部署自己的服务器啦。
开始折腾部署 Gitea 因为树莓派是ARM架构的, 所以原来保存的docker镜像都要重新下载
Pull docker images
mysql &amp;amp; percona 的 Docker Official Images 中都没有ARM &amp;amp; ARM64 的 image 如果使用mysql 做数据库请选择 mariadb
我本来也想使用 gitea + redis + mysql 的.</description>
    </item>
    
    <item>
      <title>使用 ss 命令代替 netstat</title>
      <link>https://48474.net/post/ss-replace-netstat/</link>
      <pubDate>Wed, 03 Jun 2020 04:25:15 +0800</pubDate>
      
      <guid>https://48474.net/post/ss-replace-netstat/</guid>
      <description>ss 是Socket Statistics的缩写。
顾名思义，ss 命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。
和netstat说再见的原因 当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。
天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）
用数据说话 为了让你更坚决的和netstat说再见，列举一些测试数据，以便证明ss的确名不虚传。
当服务器维持3万个socket连接，Admin需要计算具体的连接数量时，不同情况的耗时如下：
netstat -at | wc 耗时 15.60 秒 ss -atr | wc 耗时 5.40 秒（未利用tcp_diag） ss -atr | wc 耗时 0.47 秒（利用tcp_diag） 好马配上好鞍 几乎所有的Linux系统都会默认包含netstat命令，但并非所有系统都会默认包含ss命令。netstat 命令是 net-tools 工具集中的一员：
# apt-cache show net-tools Package: net-tools Version: 1.60+git20180626.aebd88e-1 而ss命令是iproute2工具集中的一员：
# apt-cache show iproute2 Package: iproute2 Version: 4.20.0-2 如果你无法使用ss命令，那么可能是缺少了 iproute2 ，需要安装一下：
# apt install -y iproute2 从某种意义上说，iproute2 工具集几乎可以替代掉 net-tools 工具集，具体的替代方案是这样的：</description>
    </item>
    
    <item>
      <title>VPS Debian8 删除一些没用的服务的方法</title>
      <link>https://48474.net/post/vps_debian_unremove_service/</link>
      <pubDate>Mon, 16 Jan 2017 13:18:39 +0800</pubDate>
      
      <guid>https://48474.net/post/vps_debian_unremove_service/</guid>
      <description>本人喜欢使用linux的debian发行版本。也用过其他的发行版本。
现在使用的vps是ufovps出售的香港云服务器。
安装的是linux的Debian8版本。
安装好后远程登陆vps后查看有如下几个服务已经安装并在运行。
exim4 rpcbind nfs+portmap 以上这些服务我都不使用，需要关闭。方法如下：
删除 exim4 服务 exim4服务 开放 port :25 大家都知道这个端口做啥都吧！
$ apt-get purge --auto-remove exim4 exim4-base exim4-config exim4-daemon-light $ rm -rf /var/log/exim4/ 删除 rpcbind 服务 rpcbind 服务 此服务开启port :111 这个端口。
$ apt-get purge --auto-remove rpcbind 删除nfs服务 $ apt-get purge --auto-remove nfs-kernel-server nfs-common portmap 如果不删除只是关闭相关服务，可以如下执行
$ systemctl disable nfs-common $ systemctl disable rpcbind $ systemctl disable exim4 $ systemctl stop nfs-common $ systemctl stop rpcbind $ systemctl stop exim4 PS：几句废话。</description>
    </item>
    
    <item>
      <title>Error: /usr/local must be writable! 解决方法</title>
      <link>https://48474.net/post/brew_update_error_fix/</link>
      <pubDate>Mon, 26 Dec 2016 12:51:15 +0800</pubDate>
      
      <guid>https://48474.net/post/brew_update_error_fix/</guid>
      <description>今天在Mac下执行brew update时出现以下错误提示：
$ brew update
Error: /usr/local must be writable!
以前一直默认用的好好的,突然出现这种情况导致不能正常使用了。 按我习惯性的方法，修改下目录的权限吧
$ sudo chmod -R g+w /usr/local
$ brew update
还是出现错误提示 Error: /usr/local must be writable!
有点晕啦，怎么还是有问题呢？ 仔细想了下，自检以下吧。
$ brew doctor
上面是修改目录的写权限，现在修改目录的用户权限吧！！
$ sudo chown -R $(whoami) /usr/local
再次执行brew doctor, 正常啦！！！
再次执行brew update, 终于正常，正常啦！！！
总结一下：
升级了macos后没执行brew doctor，导致brew 出现问题。 升级系统，一定要检测下第三方软件是否能正常工作。 检测工作没执行到底呀。 </description>
    </item>
    
  </channel>
</rss>
