<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>knowledge on DenysG的个人博客</title>
    <link>https://48474.net/categories/knowledge/</link>
    <description>Recent content in knowledge on DenysG的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Sep 2021 04:13:10 +0800</lastBuildDate><atom:link href="https://48474.net/categories/knowledge/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gitmoji &amp; 代码</title>
      <link>https://48474.net/post/gitmoji-210902/</link>
      <pubDate>Thu, 02 Sep 2021 04:13:10 +0800</pubDate>
      
      <guid>https://48474.net/post/gitmoji-210902/</guid>
      <description>Gitmoji &amp;amp; 代码    Gitmoji 代码 说明     🎨 (调色板) :art: 改进代码结构/代码格式   ⚡ (闪电) :zap: 提升性能   🔥 (火焰) :fire: 移除代码或文件   🐛 (bug) :bug: 修复   🚑 (急救车) :ambulance: 重要补丁   ✨ (火花) :sparkles: 引入新功能   📝 (备忘录) :memo: 撰写文档   🚀: (火箭) :rocket: 部署功能   💄 (口红) :lipstick: 更新   🎉 (庆祝) :tada: 初次提交   ✅ (复选框) :white_check_mark: 增加测试   🔒 (锁) :lock: 修复安全问题   🍎 (苹果) :apple: 修复   🐧 (企鹅) :penguin: 修复   🏁 (旗帜) :checkered_flag: 修复   🤖 (机器人) :robot: 修复   🍏 (绿苹果) :green_apple: 修复   🔖 (书签) :bookmark: 发行/版本标签   🚨 (警车灯) :rotating_light: 移除   🚧 (施工) :construction: 工作进行中   💚 (绿心) :green_heart: 修复   ⬇️ (下降箭头) :arrow_down: 降级依赖   ⬆️ (上升箭头) :arrow_up: 升级依赖   📌 (图钉) :pushpin: 依赖固定到特定版本   👷‍♂️ (工人) :construction_worker: 添加   📈 (上升趋势图) :chart_with_upwards_trend: 添加分析或跟踪代码   ♻️ (回收) :recycle: 重构代码   🐳 (鲸鱼) :whale: Docker   🔨 (锤子) :hammer: 重大重构   ➕ (加号) :heavy_plus_sign: 增加一个依赖   ➖ (减号) :heavy_minus_sign: 减少一个依赖   🔧 (扳手) :wrench: 修改配置文件   🌐 (地球) :globe_with_meridians: 国际化与本地化   ✏️ (铅笔) :pencil2: 修复错别字   💩 (粑粑) :poop: 编写需要改进的错误代码   ⏪ (后退) :rewind: 还原更改   🔀 (Merge分支) :twisted_rightwards_arrows: Merge 分支   📦 (包裹) :package: 更新编译文件或Package   👽 (外星人) :alien: 由于外部API的更改而更新了代码   🚚 (卡车) :truck: 移动或重命名文件   📄 (文件) :page_facing_up: 添加或更新   💥 (隆隆声) :boom: 引入重大变化   🍱 (便当) :bento: 添加或更新Assets   👌 (OK) :ok_hand: 由于代码评审更改而更新代码   ♿ (轮椅) :wheelchair: 提高可访问性   💡 (电灯泡) :bulb: 记录源代码   🍻 (啤酒) :beers: 醉醺醺地编写代码   💬 (发言) :speech_balloon: 更新文本和文字   🗃️ (文件盒) :card_file_box: 执行与数据库相关的更改   🔊 (巨大声响) :loud_sound: 添加日志   🔇 (静音) :mute: 移除日志   👥 (轮廓半身像) :busts_in_silhouette: 添加贡献者   🚸 (儿童通过) :children_crossing: 提高用户体验/可用性   🏗️ (房屋) :building_construction: 使建筑变化   📱 (苹果手机) :iphone: 致力于响应式设计   🤡 (小丑) :clown_face: Mock相关   🥚 (彩蛋) :egg: 加入一个复活节彩蛋   🙈 (非礼勿视) :see_no_evil: 添加或更新 .</description>
    </item>
    
    <item>
      <title>管理git生成的多个ssh key</title>
      <link>https://48474.net/post/git_more_ssh_keygen/</link>
      <pubDate>Thu, 31 Dec 2015 09:24:10 +0800</pubDate>
      
      <guid>https://48474.net/post/git_more_ssh_keygen/</guid>
      <description>问题阐述 当有多个git账号的时候，比如一个github，用于自己进行一些开发活动，再来一个gitlab，一般是公司内部的git。这两者你的邮箱如果不同的话，就会涉及到一个问题，生成第二个git的key的时候会覆盖第一个的key，导致必然有一个用不了。
问题解决 我们可以在~/.ssh目录下新建一个config文件配置一下，就可以解决问题
具体步骤   生成第一个ssh key(这里我用于github，用的gmail邮箱)
ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot; 这里不要一路回车，让你选择在哪里选择存放key的时候写个名字，比如 id_rsa_github，之后的两个可以回车。
完成之后我们可以看到~/.ssh目录下多了两个文件。
id_rsa_github id_rsa_github.pub   生成第二个ssh key（这里我用于gitlab，用的是公司邮箱）
ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot; 还是一样不要一路回车，在第一个对话的时候继续写个名字，比如 id_rsa_gitlab,之后的两个可以回车。
完成之后我们可以看到~/.ssh目录下多了两个文件。（一个公钥一个私钥）
id_rsa_gitlab id_rsa_gitlab.pub   打开ssh-agent
这里如果你用的github官方的bash，ssh-agent -s,
如果是其他的，比如msysgit,eval $(ssh-agent -s)。
  添加私钥
ssh-add ~/.ssh/id_rsa_github ssh-add ~/.ssh/id_rsa_gitlab   创建并修改config文件
  windows
新建一个txt文本，然后将名字后缀一起改成config即可。
  linux|unix
在bash下的话直接touch config 即可。
# gitlab Host git.int-5262.com //别名 HostName git.</description>
    </item>
    
    <item>
      <title>使用Service Interface的优缺点</title>
      <link>https://48474.net/post/service_interface_advantages_and_disadvantages/</link>
      <pubDate>Sat, 10 Oct 2015 18:18:56 +0800</pubDate>
      
      <guid>https://48474.net/post/service_interface_advantages_and_disadvantages/</guid>
      <description>使用 Service Interface 模式会导致下面的优缺点： 优点  服务接口机制与应用逻辑分隔。这种分隔使您能够轻松地添加新的接口以及更改基础应用程序的实现，同时对使用者的影响最小。 通过将服务接口代码与服务实现代码分隔开来，您就能够在不同层上部署这两部分代码，这样有可能提高解决方案的部署灵活性。  缺点  很多平台使公开应用程序功能变得很简单。但是，这可能会导致作出粒度方面的错误决定。如果接口粒度太细，可能会导致最后必须很多次调用服务，才能执行特定操作。您需要对服务接口进行相应设计，使其适合网络通信或过程外通信。 服务所提供的每个新增服务接口都会增加在更改服务所公开的功能时所需的工作量。 Service Interface 模式增加了复杂性和性能开销，这对于很简单的面向服务的应用程序来说可能不是很合适  </description>
    </item>
    
    <item>
      <title>存储知识：比较在线、近线和离线存储</title>
      <link>https://48474.net/post/storage_knowledge/</link>
      <pubDate>Sat, 10 Oct 2015 12:23:12 +0800</pubDate>
      
      <guid>https://48474.net/post/storage_knowledge/</guid>
      <description>传统存储数据的方式有两种：在线存储和离线存储。
在线存储 在线存储是指存储设备和所存储的数据时刻保持“在线”状态，可供用户随意读取，满足计算平台对数据访问的速度要求。就像PC机中常用的磁盘存储模式一样。一般在线存储设备为磁盘和磁盘阵列等存储设备，价格相对昂贵，但性能较好。
离线存储 离线存储是对在线存储数据的备份，以防范可能发生的数据灾难。离线存储的数据不常被调用，一般也远离系统应用，所以人们用“离线”来生动地描述这种存储方式。
离线存储介质上的数据在读写时是顺序进行的。当需要读取数据时，需要把磁带卷到头，再进行定位。当需要对已写入的数据进行修改时，所有的数据都需要全部进行改写。因此，离线存储的访问速度慢、效率低。离线存储的典型产品是磁带库，价格相对低廉。
近线存储 所谓近线存储(NearStore)，是随着客户存储环境的细化所提出的一个概念，所谓的近线存储，外延相对较广泛，主要定位于客户在线存储和离线存储之间的应用。就是指将那些并不是经常用到，或者说数据的访问量并不大的数据存放在性能较低的存储设备上。但同时对这些的设备要求是寻址迅速、传输率高。(例如客户一些长期保存的不长用的文件的归档)。因此，近线存储对性能要求相对来说并不高，但又要求相对较好的访问性能。同时多数情况下由于不常用的数据要占总数据量的比较大的比重，这也就要求近线存储设备在需要容量相对较大。</description>
    </item>
    
  </channel>
</rss>
