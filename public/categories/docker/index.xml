<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on DenysG的个人博客</title>
    <link>https://48474.net/categories/docker/</link>
    <description>Recent content in Docker on DenysG的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Nov 2018 00:08:48 +0800</lastBuildDate>
    
	<atom:link href="https://48474.net/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker 常用命令（一）</title>
      <link>https://48474.net/post/docker-readme01/</link>
      <pubDate>Mon, 05 Nov 2018 00:08:48 +0800</pubDate>
      
      <guid>https://48474.net/post/docker-readme01/</guid>
      <description>使用了一段时间 docker 了。现整理出一些常用的 docker cli 指令，方便查找。
官方CLI网址 - Docker CLI
 对开发，测试和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。 确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊？！” 这类问题。 由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。   Docker 好， Docker化 好！ 好！ 好！
 开发常用的指令 # docker search debian # docker pull debian:&amp;lt;tag&amp;gt; # docker run -it --rm debian // 启动一个容器，并且在运行结束后删除容器 # docker run --name mydebian -it --rm debian // 启动一个容器并命名为mydebian # docker run -it --rm debian sh -c &amp;#34;cmd1 &amp;amp;&amp;amp; cmd2&amp;#34; //启动容器并执行多个命令 # docker run -it --rm --mount type=bind,source=/&amp;lt;host-path&amp;gt;,target=/&amp;lt;container-path&amp;gt; debian // 启动容器并挂载本机目录 # docker run -it --rm -v &amp;lt;host-path&amp;gt;:&amp;lt;container-path&amp;gt; debian //上面的简化 创建新的网络,并在启动本地容器的时候 指定ip # docker network create --subnet=172.</description>
    </item>
    
    <item>
      <title>Dockerfile 参考文档 （一）</title>
      <link>https://48474.net/post/dockerfile-reference-1/</link>
      <pubDate>Sun, 02 Sep 2018 12:01:39 +0800</pubDate>
      
      <guid>https://48474.net/post/dockerfile-reference-1/</guid>
      <description>Dockerfile Dockerfile 是由一系列命令和参数构成的脚本，一个 Dockerfile 里面包含了构建整个 image 的完整命令。Docker通过 docker build 执行Dockerfile 中的一系列命令自动构建 image。
Dockerfile 其语法非常简单，此页面描述了您可以在 Dockerfile 中使用的命令。 阅读此页面后，你可以参阅Dockerfile最佳实践。
Usage docker build 命令从 Dockerfile 和 context 构建image。context 是 PATH 或URL 处的文件。PATH 本地文件目录。 URL 是Git repository的位置。
context 以递归方式处理。因此，PATH 包括任何子目录，URL 包括repository及submodules。一个使用当前目录作为 context 的简单构建命令：
$ docker build . Sending build context to Docker daemon 6.51 MB ... 构建由Docker守护程序运行，而不是由CLI运行。构建过程所做的第一件事是将整个context（递归地）发送给守护进程。大多数情况下，最好是将 Dockerfile 和所需文件复制到一个空的目录，再到这个目录进行构建。
 警告：不要使用根目录 / 作为PATH，因为它会导致构建将硬盘驱动器的所有内容传输到Docker守护程序。
 build时添加文件，通过 Dockerfile 引用指令中指定的文件，例如 COPY 指令。要增加构建的性能，请通过将.dockerignore 文件添加到 context 目录中来排除文件和目录。有关如何创建 .dockerignore 文件的信息，请参阅此页上的文档。</description>
    </item>
    
  </channel>
</rss>