<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源 on DenysG的个人博客</title>
    <link>https://48474.net/tags/%E5%BC%80%E6%BA%90/</link>
    <description>Recent content in 开源 on DenysG的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Nov 2022 18:32:32 +0800</lastBuildDate><atom:link href="https://48474.net/tags/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>树莓派4B-安装raspi-firmware</title>
      <link>https://48474.net/post/raspi-install_raspi-firmware/</link>
      <pubDate>Tue, 15 Nov 2022 18:32:32 +0800</pubDate>
      
      <guid>https://48474.net/post/raspi-install_raspi-firmware/</guid>
      <description>网友问我，如何在服务器版本安装 raspi-config 这个GUI工具。 就整理了这个教程出来。
step 1 新增一个 apt 的 sources 文件
$ mkdir -p /etc/apt/keyrings $ curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/raspberrypi.gpg.key | gpg --dearmor -o /etc/apt/keyrings/raspi.gpg $ echo \ &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/raspi.gpg] https://mirrors.tuna.tsinghua.edu.cn/raspberrypi \ $(lsb_release -cs) stable&amp;#34; | tee /etc/apt/sources.list.d/raspi.gpg &amp;gt; /dev/null 这里使用的 清华的源 https://mirrors.tuna.tsinghua.edu.cn/raspberrypi
以前的 app-key 的指令方法，现在已经升级了哦。会不成功。
step 2
安装 raspi-firmware 包。
$ apt update $ apt install raspi-firmware step 3
执行指令 raspi-config 就会出现 GUI 界面了。</description>
    </item>
    
    <item>
      <title>树莓派4B-WiringPi库</title>
      <link>https://48474.net/post/raspi-wiringpi/</link>
      <pubDate>Sun, 06 Nov 2022 23:47:32 +0800</pubDate>
      
      <guid>https://48474.net/post/raspi-wiringpi/</guid>
      <description>WiringPi 官网 wiringpi.com
GitHub WiringPi github.com/WiringPi
目前 https://github.com/WiringPi 仓库支持的版本有
C/C++ Python PHP Node Ruby Perl WiringPi-Go WiringPi-Go
Golang wrapped version of Gordon&amp;rsquo;s Arduino-like WiringPi for the Raspberry Pi
WiringPi库简介 WiringPi是一个用C语言编写的、基于PIN的GPIO访问库，提供了GPIO、I2C、SPI、UART和PWM等库，对于树莓派的GPIO编程相当方便。目前可在基于BCM2835、BCM2836和BCM2837的树莓派中使用。其他详细介绍请参看wiringPi官网介绍。
WiringPi-C 安装 截止文章发布日（2022-11-06） WiringPi Releases Version 2.61-1
https://github.com/WiringPi/WiringPi/releases/tag/2.61-1
方法1: deb方式
cd ~/work ## 请按系统选择格式的deb包。本人系统为 64位 版本。 wget https://github.com/WiringPi/WiringPi/releases/download/2.61-1/wiringpi-2.61-1-arm64.deb dpkg -i wiringpi-2.61-1-arm64.deb 方法2: 源码方式
cd ~/work wget -O wiringpi-2.61-1.tar.gz https://github.com/WiringPi/WiringPi/archive/refs/tags/2.61-1.tar.gz tar zxfv wiringpi-2.61-1.tar.gz cd wiringpi-2.61-1 ./build 安装成功后，输入命令：gpio -v，可以查看WiringPi的版本
其他开放的 command gpio -h</description>
    </item>
    
    <item>
      <title>今天学到了 Jest 单元测试</title>
      <link>https://48474.net/post/jest-guide/</link>
      <pubDate>Wed, 10 Aug 2022 07:56:00 +0800</pubDate>
      
      <guid>https://48474.net/post/jest-guide/</guid>
      <description>Jest 是一款优雅、简洁的 JavaScript 测试框架。
Jest 支持 Babel、TypeScript、Node、React、Angular、Vue 等诸多框架！
有幸参与了一个微信小程序项目前端开发，此项目使用 uniapp vue2开发。 接触了一次jest单元测试，写下笔记有益于以后继续学习和回顾。
为了保证项目中代码方法的正确性，必然就需要去做单元测试。选择了 Jest 测试框架。
jest单元测试NPM包 在项目目录下执行如下指令
yarn add --dev jest \ babel-jest \ @babel/core \ @babel/preset-env \ @vue/vue2-jest \ @vue/test-utils \ jsdom \ jest-environment-jsdom 需要注意下 Vue2 版本中npm包的版本
&amp;#34;@babel/preset-env&amp;#34;: &amp;#34;^7.18.10&amp;#34;, &amp;#34;@vue/test-utils&amp;#34;: &amp;#34;^1.2.0&amp;#34; &amp;#34;@vue/test-utils&amp;#34;: &amp;#34;^1.3.0&amp;#34;, &amp;#34;@vue/vue2-jest&amp;#34;: &amp;#34;^28.0.1&amp;#34;, &amp;#34;babel-jest&amp;#34;: &amp;#34;^28.1.3&amp;#34;, &amp;#34;jest&amp;#34;: &amp;#34;^28.1.3&amp;#34;, &amp;#34;jest-environment-jsdom&amp;#34;: &amp;#34;^28.1.3&amp;#34;, &amp;#34;jsdom&amp;#34;: &amp;#34;^20.0.0&amp;#34;, 以上内容直接添加到 package.json 文件 devDependencies 节点中， 执行 yarn install 即可。 🚧
jest单元测试配置 jest.config.js module.exports = { testEnvironment: &amp;#34;jsdom&amp;#34;, //用于测试的测试环境 testMatch: [ //检测测试文件 &amp;#39;**/test/units/**/?</description>
    </item>
    
    <item>
      <title>Dockerfile 参考文档 （一）</title>
      <link>https://48474.net/post/dockerfile-reference-1/</link>
      <pubDate>Sun, 02 Sep 2018 12:01:39 +0800</pubDate>
      
      <guid>https://48474.net/post/dockerfile-reference-1/</guid>
      <description>Dockerfile Dockerfile 是由一系列命令和参数构成的脚本，一个 Dockerfile 里面包含了构建整个 image 的完整命令。Docker通过 docker build 执行Dockerfile 中的一系列命令自动构建 image。
Dockerfile 其语法非常简单，此页面描述了您可以在 Dockerfile 中使用的命令。 阅读此页面后，你可以参阅Dockerfile最佳实践。
Usage docker build 命令从 Dockerfile 和 context 构建image。context 是 PATH 或URL 处的文件。PATH 本地文件目录。 URL 是Git repository的位置。
context 以递归方式处理。因此，PATH 包括任何子目录，URL 包括repository及submodules。一个使用当前目录作为 context 的简单构建命令：
$ docker build . Sending build context to Docker daemon 6.51 MB ... 构建由Docker守护程序运行，而不是由CLI运行。构建过程所做的第一件事是将整个context（递归地）发送给守护进程。大多数情况下，最好是将 Dockerfile 和所需文件复制到一个空的目录，再到这个目录进行构建。
警告：不要使用根目录 / 作为PATH，因为它会导致构建将硬盘驱动器的所有内容传输到Docker守护程序。
build时添加文件，通过 Dockerfile 引用指令中指定的文件，例如 COPY 指令。要增加构建的性能，请通过将.dockerignore 文件添加到 context 目录中来排除文件和目录。有关如何创建 .dockerignore 文件的信息，请参阅此页上的文档。
一般的，Dockerfile 位于 context 的根中。但使用 -f 标志可指定Dockerfile的位置。</description>
    </item>
    
    <item>
      <title>gRPC：Google开源的基于HTTP/2和ProtoBuf的通用RPC框架</title>
      <link>https://48474.net/post/grpc-google-http2-protobuf/</link>
      <pubDate>Wed, 15 Aug 2018 11:16:15 +0800</pubDate>
      
      <guid>https://48474.net/post/grpc-google-http2-protobuf/</guid>
      <description>gRPC是一个高性能、通用的开源RPC框架，其由Google主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers)序列化协议开发，且支持众多开发语言。gRPC提供了一种简单的方法来精确地定义服务和为iOS、Android和后台支持服务自动生成可靠性很强的客户端功能库。客户端充分利用高级流和链接功能，从而有助于节省带宽、降低的TCP链接次数、节省CPU使用、和电池寿命。
gRPC具有以下重要特征：
强大的IDL特性
gRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议（类似于XML、JSON、hessian）。ProtoBuf能够将数据进行序列化，并广泛应用在数据存储、通信协议等方面。不过，当前gRPC仅支持 Protobuf ，且不支持在浏览器中使用。由于gRPC的设计能够支持支持多种数据格式，所以读者能够很容易实现对其他数据格式（如XML、JSON等）的支持。
定义服务的示例代码如下：
message HelloRequest { string greeting = 1; } message HelloResponse { string reply = 1; } service HelloService { rpc SayHello(HelloRequest) returns (HelloResponse); } 支持多语言
gRPC支持多种语言，并能够基于语言自动生成客户端和服务端功能库。目前，在GitHub上已提供了 C版本grpc、Java版本grpc-java 和 Go版本grpc-go，其它语言的版本正在积极开发中，其中 grpc支持 C、C++、Node.js、Python、Ruby、Objective-C、PHP 和 C# 等语言，grpc-java 已经支持Android开发。
基于HTTP/2标准设计
由于gRPC基于HTTP/2标准设计，所以相对于其他RPC框架，gRPC带来了更多强大功能，如双向流、头部压缩、多复用请求等。这些功能给移动设备带来重大益处，如节省带宽、降低TCP链接次数、节省CPU使用和延长电池寿命等。同时，gRPC还能够提高了云端服务和Web应用的性能。gRPC既能够在客户端应用，也能够在服务器端应用，从而以透明的方式实现客户端和服务器端的通信和简化通信系统的构建。
gRPC已经应用在Google的云服务和对外提供的API中，其主要应用场景如下：
低延迟、高扩展性、分布式的系统 同云服务器进行通信的移动应用客户端 设计语言独立、高效、精确的新协议 便于各方面扩展的分层设计，如认证、负载均衡、日志记录、监控等 近日，gRPC开发团队宣布gRPC基于 BSD 3-Clause License 许可协议开源，相关代码已托管在GitHub上。当前已有Google和移动支付公司Square以及其他组织或个人为该项目贡献代码。有兴趣的读者可以在GitHub选择需要的语言版本，并根据提供的README文档尝试gRPC的功能，或者参考FAQ，以获得对gRPC更多信息。此外，在gRPC-common仓库中，还提供了例子、快速入门指南等相关文档。</description>
    </item>
    
    <item>
      <title>CaddyServer使用记录</title>
      <link>https://48474.net/post/caddy-guide/</link>
      <pubDate>Thu, 22 Dec 2016 14:37:00 +0800</pubDate>
      
      <guid>https://48474.net/post/caddy-guide/</guid>
      <description>Caddy是一个Golang编写的服务器软件，官方的宣传语“The HTTP/2 web server with automatic HTTPS”以及“Serve The Web Like It&amp;rsquo;s 2016”简明表达了这个软件的优点和趋势，它拥有Apache或者Nginx所具有的web server模块，同时还有一些很有特色的功能，比如:
HTTP/2 Automatic HTTPS Multi-core Websockets Markdown IPv6 Git FastCGI &amp;hellip; 在去年就开始使用Caddy，它提供的便捷配置，部署了内部测试服务的Web服务器、个人网站的Web服务器。配置项的语法简单粗暴，非常简洁明了。比nginx简单多了。
下面举几个例子：
简单的测试网站 :8530 { root /var/www/test_site } 使用git同步测试环境 :8530 { root /var/www/test_site/public git git.int5262.com/user_name/project_name { path ../ interval 60 } fastcgi / 127.0.0.1:9001 php } 站点跳转 http://48474.com, http://www.48474.com { redir https://48474.com{uri} } 看看吧，是不是太简单了？ 配置起来能具体到简洁到哭的指令。 详细文档请看官方的User Guide。
启动caddy也很简单
/path/to/caddy -conf=&amp;#34;/path/to/caddy/caddyfile&amp;#34; Caddy官网 https://caddyserver.com
官方的下载页面提供了定制并编译的功能，很好用哦。不用下载源码编译。国内还要翻（GFW）封锁墙的。 Caddy一键安装脚本 https://getcaddy.com curl https://getcaddy.com | bash </description>
    </item>
    
    <item>
      <title>xorm 说明</title>
      <link>https://48474.net/post/xorm-readme/</link>
      <pubDate>Fri, 09 Oct 2015 16:13:10 +0800</pubDate>
      
      <guid>https://48474.net/post/xorm-readme/</guid>
      <description>xorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。xorm的目标并不是让你完全不去学习SQL，我们认为SQL并不会为ORM所替代，但是ORM将可以解决绝大部分的简单SQL需求。xorm支持两种风格的混用。
特性 支持Struct和数据库表之间的灵活映射，并支持自动同步表结构 事务支持 支持原始SQL语句和ORM操作的混合执行 使用连写来简化调用 支持使用Id, In, Where, Limit, Join, Having, Table, Sql, Cols等函数和结构体等方式作为条件 支持级联加载Struct 支持LRU缓存(支持memory, memcache, leveldb, redis缓存Store) 和 Redis缓存 支持反转，即根据数据库自动生成xorm的结构体 支持事件 支持created, updated, deleted和version记录版本（即乐观锁） 驱动支持 xorm当前支持的驱动和数据库如下：
Mysql: github.com/go-sql-driver/mysql MyMysql: github.com/ziutek/mymysql/godrv SQLite: github.com/mattn/go-sqlite3 Postgres: github.com/lib/pq MsSql: github.com/denisenkom/go-mssqldb MsSql: github.com/lunny/godbc 安装 推荐使用 gopm 进行安装：
gopm get github.com/go-xorm/xorm 或者您也可以使用go工具进行安装：
go get github.com/go-xorm/xorm 文档 操作指南 GoWalker代码文档 Godoc代码文档 讨论 请加入QQ群：280360085 进行讨论。
贡献 如果您也想为Xorm贡献您的力量，请查看 CONTRIBUTING
LICENSE BSD License http://creativecommons.org/licenses/BSD/</description>
    </item>
    
  </channel>
</rss>
