<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>solutions on DenysG的个人博客</title>
    <link>https://48474.net/tags/solutions/</link>
    <description>Recent content in solutions on DenysG的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Oct 2020 12:25:15 +0800</lastBuildDate><atom:link href="https://48474.net/tags/solutions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>折腾日志(1) -- 自用树莓派内网穿透搭建GITEA</title>
      <link>https://48474.net/post/toss-log-01-raspberrypi/</link>
      <pubDate>Wed, 14 Oct 2020 12:25:15 +0800</pubDate>
      
      <guid>https://48474.net/post/toss-log-01-raspberrypi/</guid>
      <description>自备树莓派4B  这台自行组装的树莓派4B，主要用途: 存储，应用服务。
   安装树莓派系统, 并且安装到树莓派到硬盘中
这里不多说安装树莓派的方法，可以自行搜索 度娘 或 谷歌
  我的树莓派是啥样子的？？ (最近搭建了个图床可以上图了) 无图无真相。 主板 1 块： 树莓派4B 8G
  SSD硬盘 2块：
一块 256G(上面红色的),
另一块 512G(下面银色的)。 全部是 浦科特（Plextor） M8VC。
扩展板 2块：
  X829 扩展板:: 一款2.5&#39; 双硬盘 NAS扩展板 树莓派4B&amp;ndash;树莓派NAS集群 X829 扩展板
  X735扩展板:: 电源管理和温控风扇扩展板 树莓派4B&amp;ndash;X735电源管理和温控风扇扩展板
  俯视图 右侧接口 左侧HHD指示灯 安装好docker，frpc 这2个服务应用   以上都安装好了，就可以部署自己的服务器啦。
 开始折腾部署 Gitea  因为树莓派是ARM架构的, 所以原来保存的docker镜像都要重新下载
   Pull docker images</description>
    </item>
    
    <item>
      <title>使用 ss 命令代替 netstat</title>
      <link>https://48474.net/post/ss-replace-netstat/</link>
      <pubDate>Wed, 03 Jun 2020 04:25:15 +0800</pubDate>
      
      <guid>https://48474.net/post/ss-replace-netstat/</guid>
      <description>ss 是Socket Statistics的缩写。
顾名思义，ss 命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。
和netstat说再见的原因 当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。
天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）
用数据说话 为了让你更坚决的和netstat说再见，列举一些测试数据，以便证明ss的确名不虚传。
当服务器维持3万个socket连接，Admin需要计算具体的连接数量时，不同情况的耗时如下：
netstat -at | wc 耗时 15.60 秒 ss -atr | wc 耗时 5.40 秒（未利用tcp_diag） ss -atr | wc 耗时 0.47 秒（利用tcp_diag） 好马配上好鞍 几乎所有的Linux系统都会默认包含netstat命令，但并非所有系统都会默认包含ss命令。netstat 命令是 net-tools 工具集中的一员：
# apt-cache show net-tools Package: net-tools Version: 1.60+git20180626.aebd88e-1 而ss命令是iproute2工具集中的一员：
# apt-cache show iproute2 Package: iproute2 Version: 4.20.0-2 如果你无法使用ss命令，那么可能是缺少了 iproute2 ，需要安装一下：
# apt install -y iproute2 从某种意义上说，iproute2 工具集几乎可以替代掉 net-tools 工具集，具体的替代方案是这样的：</description>
    </item>
    
    <item>
      <title>gRPC：Google开源的基于HTTP/2和ProtoBuf的通用RPC框架</title>
      <link>https://48474.net/post/grpc-google-http2-protobuf/</link>
      <pubDate>Wed, 15 Aug 2018 11:16:15 +0800</pubDate>
      
      <guid>https://48474.net/post/grpc-google-http2-protobuf/</guid>
      <description>gRPC是一个高性能、通用的开源RPC框架，其由Google主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers)序列化协议开发，且支持众多开发语言。gRPC提供了一种简单的方法来精确地定义服务和为iOS、Android和后台支持服务自动生成可靠性很强的客户端功能库。客户端充分利用高级流和链接功能，从而有助于节省带宽、降低的TCP链接次数、节省CPU使用、和电池寿命。
gRPC具有以下重要特征：
  强大的IDL特性
gRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议（类似于XML、JSON、hessian）。ProtoBuf能够将数据进行序列化，并广泛应用在数据存储、通信协议等方面。不过，当前gRPC仅支持 Protobuf ，且不支持在浏览器中使用。由于gRPC的设计能够支持支持多种数据格式，所以读者能够很容易实现对其他数据格式（如XML、JSON等）的支持。
定义服务的示例代码如下：
message HelloRequest { string greeting = 1; } message HelloResponse { string reply = 1; } service HelloService { rpc SayHello(HelloRequest) returns (HelloResponse); }   支持多语言
gRPC支持多种语言，并能够基于语言自动生成客户端和服务端功能库。目前，在GitHub上已提供了 C版本grpc、Java版本grpc-java 和 Go版本grpc-go，其它语言的版本正在积极开发中，其中 grpc支持 C、C++、Node.js、Python、Ruby、Objective-C、PHP 和 C# 等语言，grpc-java 已经支持Android开发。
  基于HTTP/2标准设计
由于gRPC基于HTTP/2标准设计，所以相对于其他RPC框架，gRPC带来了更多强大功能，如双向流、头部压缩、多复用请求等。这些功能给移动设备带来重大益处，如节省带宽、降低TCP链接次数、节省CPU使用和延长电池寿命等。同时，gRPC还能够提高了云端服务和Web应用的性能。gRPC既能够在客户端应用，也能够在服务器端应用，从而以透明的方式实现客户端和服务器端的通信和简化通信系统的构建。
  gRPC已经应用在Google的云服务和对外提供的API中，其主要应用场景如下：
 低延迟、高扩展性、分布式的系统 同云服务器进行通信的移动应用客户端 设计语言独立、高效、精确的新协议 便于各方面扩展的分层设计，如认证、负载均衡、日志记录、监控等  近日，gRPC开发团队宣布gRPC基于 BSD 3-Clause License 许可协议开源，相关代码已托管在GitHub上。当前已有Google和移动支付公司Square以及其他组织或个人为该项目贡献代码。有兴趣的读者可以在GitHub选择需要的语言版本，并根据提供的README文档尝试gRPC的功能，或者参考FAQ，以获得对gRPC更多信息。此外，在gRPC-common仓库中，还提供了例子、快速入门指南等相关文档。</description>
    </item>
    
    <item>
      <title>VPS Debian8 删除一些没用的服务的方法</title>
      <link>https://48474.net/post/vps_debian_unremove_service/</link>
      <pubDate>Mon, 16 Jan 2017 13:18:39 +0800</pubDate>
      
      <guid>https://48474.net/post/vps_debian_unremove_service/</guid>
      <description>本人喜欢使用linux的debian发行版本。也用过其他的发行版本。
现在使用的vps是ufovps出售的香港云服务器。
安装的是linux的Debian8版本。
安装好后远程登陆vps后查看有如下几个服务已经安装并在运行。
   exim4 rpcbind nfs+portmap  以上这些服务我都不使用，需要关闭。方法如下：
删除 exim4 服务 exim4服务 开放 port :25 大家都知道这个端口做啥都吧！
$ apt-get purge --auto-remove exim4 exim4-base exim4-config exim4-daemon-light $ rm -rf /var/log/exim4/ 删除 rpcbind 服务 rpcbind 服务 此服务开启port :111 这个端口。
$ apt-get purge --auto-remove rpcbind 删除nfs服务 $ apt-get purge --auto-remove nfs-kernel-server nfs-common portmap 如果不删除只是关闭相关服务，可以如下执行
$ systemctl disable nfs-common $ systemctl disable rpcbind $ systemctl disable exim4 $ systemctl stop nfs-common $ systemctl stop rpcbind $ systemctl stop exim4  PS：几句废话。</description>
    </item>
    
    <item>
      <title>Error: /usr/local must be writable! 解决方法</title>
      <link>https://48474.net/post/brew_update_error_fix/</link>
      <pubDate>Mon, 26 Dec 2016 12:51:15 +0800</pubDate>
      
      <guid>https://48474.net/post/brew_update_error_fix/</guid>
      <description>今天在Mac下执行brew update时出现以下错误提示：
 $ brew update
Error: /usr/local must be writable!
 以前一直默认用的好好的,突然出现这种情况导致不能正常使用了。 按我习惯性的方法，修改下目录的权限吧
 $ sudo chmod -R g+w /usr/local
$ brew update
还是出现错误提示 Error: /usr/local must be writable!
 有点晕啦，怎么还是有问题呢？ 仔细想了下，自检以下吧。
 $ brew doctor
 上面是修改目录的写权限，现在修改目录的用户权限吧！！
 $ sudo chown -R $(whoami) /usr/local
 再次执行brew doctor, 正常啦！！！
再次执行brew update, 终于正常，正常啦！！！
总结一下：
 升级了macos后没执行brew doctor，导致brew 出现问题。 升级系统，一定要检测下第三方软件是否能正常工作。 检测工作没执行到底呀。  </description>
    </item>
    
    <item>
      <title>CaddyServer使用记录</title>
      <link>https://48474.net/post/caddy-guide/</link>
      <pubDate>Thu, 22 Dec 2016 14:37:00 +0800</pubDate>
      
      <guid>https://48474.net/post/caddy-guide/</guid>
      <description>Caddy是一个Golang编写的服务器软件，官方的宣传语“The HTTP/2 web server with automatic HTTPS”以及“Serve The Web Like It&amp;rsquo;s 2016”简明表达了这个软件的优点和趋势，它拥有Apache或者Nginx所具有的web server模块，同时还有一些很有特色的功能，比如:
 HTTP/2 Automatic HTTPS Multi-core Websockets Markdown IPv6 Git FastCGI &amp;hellip;  在去年就开始使用Caddy，它提供的便捷配置，部署了内部测试服务的Web服务器、个人网站的Web服务器。配置项的语法简单粗暴，非常简洁明了。比nginx简单多了。
下面举几个例子：
 简单的测试网站  :8530 { root /var/www/test_site }  使用git同步测试环境  :8530 { root /var/www/test_site/public git git.int5262.com/user_name/project_name { path ../ interval 60 } fastcgi / 127.0.0.1:9001 php }  站点跳转  http://48474.com, http://www.48474.com { redir https://48474.com{uri} } 看看吧，是不是太简单了？ 配置起来能具体到简洁到哭的指令。 详细文档请看官方的User Guide。
启动caddy也很简单
/path/to/caddy -conf=&amp;quot;/path/to/caddy/caddyfile&amp;quot;  Caddy官网 https://caddyserver.</description>
    </item>
    
    <item>
      <title>Golang程序配置方案小结</title>
      <link>https://48474.net/post/config-solutions-for-golang-app/</link>
      <pubDate>Sat, 10 Oct 2015 13:44:31 +0800</pubDate>
      
      <guid>https://48474.net/post/config-solutions-for-golang-app/</guid>
      <description>在Twitter上看到一篇关于Golang程序配置方案总结的系列文章（一个mini series，共6篇），原文链接：在这里。我觉得不错，这里粗略整理（非全文翻译）一下，供大家参考。
一、背景 无论使用任何编程语言开发应用，都离不开配置数据。配置数据提供的形式有多样，不外乎命令行选项(options)、参数（parameters)，环境变量（envvars)以及配置文件等。Golang也不例外。Golang内置flag标准库，可以用来支持部分命令行选项和参数的解析；Golang通过os包提 供的方法可以获取当前环境变量；但Golang没有规定标准配置文件格式(虽说内置支持xml、json)，多通过第三方 包来解决配置文件读取的问题。Golang配置相关的第三方包很多，作者在本文中给出的配置方案中就包含了主流的第三方配置数据操作包。
文章作者认为一个良好的应用配置层次应该是这样的：
 程序内内置配置项的初始默认值 配置文件中的配置项值可以覆盖(override)程序内配置项的默认值。 命令行选项和参数值具有最高优先级，可以override前两层的配置项值。  下面就按作者的思路循序渐进探讨golang程序配置方案。
二、解析命令行选项和参数 这一节关注golang程序如何访问命令行选项和参数。
golang对访问到命令行参数提供了内建的支持：
//cmdlineargs.go package main import ( // &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;path/filepath&amp;quot; ) func main() { println(&amp;quot;I am &amp;quot;, os.Args[0]) baseName := filepath.Base(os.Args[0]) println(&amp;quot;The base name is &amp;quot;, baseName) // The length of array a can be discovered using the built-in function len println(&amp;quot;Argument # is &amp;quot;, len(os.Args)) // the first command line arguments if len(os.Args) &amp;gt; 1 { println(&amp;quot;The first command line argument: &amp;quot;, os.</description>
    </item>
    
  </channel>
</rss>
