<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Caddy on DenysG的个人博客</title>
    <link>https://48474.net/tags/caddy/</link>
    <description>Recent content in Caddy on DenysG的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Dec 2016 14:37:00 +0800</lastBuildDate>
    
	<atom:link href="https://48474.net/tags/caddy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CaddyServer使用记录</title>
      <link>https://48474.net/post/caddy-guide/</link>
      <pubDate>Thu, 22 Dec 2016 14:37:00 +0800</pubDate>
      
      <guid>https://48474.net/post/caddy-guide/</guid>
      <description>Caddy是一个Golang编写的服务器软件，官方的宣传语“The HTTP/2 web server with automatic HTTPS”以及“Serve The Web Like It&amp;rsquo;s 2016”简明表达了这个软件的优点和趋势，它拥有Apache或者Nginx所具有的web server模块，同时还有一些很有特色的功能，比如:
 HTTP/2 Automatic HTTPS Multi-core Websockets Markdown IPv6 Git FastCGI &amp;hellip;  在去年就开始使用Caddy，它提供的便捷配置，部署了内部测试服务的Web服务器、个人网站的Web服务器。配置项的语法简单粗暴，非常简洁明了。比nginx简单多了。
下面举几个例子：
 简单的测试网站
  :8530 { root /var/www/test_site }   使用git同步测试环境
  :8530 { root /var/www/test_site/public git git.int5262.com/user_name/project_name { path ../ interval 60 } fastcgi / 127.0.0.1:9001 php }   站点跳转
  http://48474.com, http://www.48474.com { redir https://48474.com{uri} }  看看吧，是不是太简单了？ 配置起来能具体到简洁到哭的指令。 详细文档请看官方的User Guide。</description>
    </item>
    
  </channel>
</rss>